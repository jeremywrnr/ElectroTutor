-
  tutorial:
    title: Light Sensitive Alarm Clock
    image: /tutorial/tutorial-demo.gif
    description: When the sun rises, set off an alarm with sound and light.
  steps:
    -
      title: Introduction
      image: /tutorial/tutorial-demo.gif
      description: |
        In this tutorial, you will build an light-sensitive alarm clock!
    -
      title: Components Overview
      description: |
        ![parts](parts.jpg)

        Here are the parts this tutorial requires:

        - Arduino UNO microcontroller
        - Neopixel LED Ring
        - Piezo Buzzer
        - Resistor
        - Button
        - Light Sensor

    -
      title: Firing up the Arduino
      description: |
        ![plug](plug.gif)

        First, connect the Arduino board to the USB port.

        To make sure it is connected ok, try uploading the starter code to it.

        The lights on the top of the board flash as it recieves new code!
      tests:
        -
          title: Board Power Test
          description: Did the Arduino board light up after plugging it in?
          onerror: Make sure that the board is powered with the USB plug!
          form: manual
        -
          title: Simple Upload Test
          description: Press the button below to upload code to the board.
          onerror: Make sure that the board is plugged with the correctly labeled cable!
          form: upload
    -
      title: Breadboard Connection Overview
      image: /tutorial/breadboard.gif
      description: |
        The red and blue `(+/-)` rows along the sides of the board are connected.

        The center rows are connected horizontally.
    -
      title: Wiring Button Connections
      title: Connecting Power and Ground
      description: |
        ![power](power.jpg)

        From the Arduino to the breadboard, connect:
        - *GND* (ground) line to the blue rail
        - *5V* (power) line to the red rail

        ![power](power-crop.jpg)

      tests:
        -
          title: Breadboard Power Check
          description: |
            ![power](measure-power.jpg)

            Measure the power rail with the tester's two probes on the testing board.

            Press the button below to start measuring voltage.
          onerror: Make sure that you use the 5V pin; not the Vin or 3.3V pins!
          form: numeric
          output: '5.0'
    -
      title: Reset Button Setup
      description: |
        ![button-in](button-in.jpg)

        Connect the button to `GND` by placing a wire between the blue `(-)` line and one end of the button.

        Connect the button's other side to the digital `0` pin on the Arduino board.

        ![button-in](button-in-crop.jpg)

        The button's legs are connected in pairs. When you press the button, you connect the pairs.

        ![button](button.jpg)

      tests:
        -
          title: Button Press Check
          description: |
            ![piezo](measure-button.jpg)

            Measure the voltage across the button.

            ![piezo](measure-button-crop.jpg)

            It should drop when you press the button down.

            Click the button below to setup the test.

          form: numeric
          output: '0.0'
        -
          title: Hardware Wiring Check
          description: |
            The system will now check to see that you have wired up the board correctly.

            Does the Arduino light turn on as you push the button?

            Click below to setup the test.

          onerror: Check that the wire between the button and the board is in the right place.
          jsondata: '{"file":"1_button.ino"}'
          form: autoupload
    -
      title: Button Press Detection Code
      description: |
        Now that the button is connected, we need to detect when it is being pressed in software.

        At the top of the file, add this definition to set which Arduino pin the button is connected to.

        ```
        #define button 0
        #define outLED 13
        ```

        Next, add this code inside of the `setup()` function to add pin 0 as an input, using `pinMode`:

        ```
          pinMode(button, INPUT);
          pinMode(outLED, OUTPUT);
        ```

        Last, add this code to the `loop()` function to read the button's value.

        This code will also copy the button state to the onboard Arduino LED.


        ```
          int press = !digitalRead(button);
          digitalWrite(outLED, press);
        ```

      tests:
        -
          title: Software Variable Check
          description: |
            The system will now check to see that you programmed the board correctly.

            Press the button, and change the value of `press` in software to `1`.

            Click below to setup the test.

          onerror: Make sure that you are saving the sensor value into `press`.
          jsondata: '[{"name": "press", "value": 1}]' # name, value, line
          form: variable
    -
      title: Piezo Buzzer Wiring
      description: |
        ![pie](piezo.jpg)

        Next, connect the piezo buzzer to the the third digital Arduino pin `(3)`.

        Connect the other end of the piezo to GND (the blue rail) with the resistor.

        ![pie](piezo-crop.jpg)

      tests:
        -
          title: Wiring Check
          description: |
            In this test, if the board is wired up according to the tutorial it will beep.

            Does the piezo beep after code is uploaded?

            Click below to setup the test.

          onerror: Make the sure one end of the piezo is going to GND with the resistor, and the other end is going to pin 3!
          jsondata: '{"file":"2_sounds.ino"}'
          form: autoupload
    -
      title: Tone Generation Code
      description: |
        Now that our system is reading the button correctly, let's hook the
        button up to play a noise using the Piezo sensor and the Arduino tone generator.

        Use this code, or upload and it test it automatically from the testing pane.

        Add two more statements at the top to define our buzzer pin, and the note frequency.

        ```
        #define buzzer 3
        #define freq 220
        ```

        Then, in the `loop()` function, set the noise to play when the button is pressed:

        ```
          if (press) {
            tone(buzzer, freq, 10);
            delay(10);
          }
        ```

      tests:
        -
          title: Code Selection Test
          description: Highlight to select the part of your code which turns on the buzzer.
          onerror: Make sure to include the buzzer line as described in the left pane.
          jsondata: '{"match": "tone", "flag": "i"}'
          form: code # regex
        -
          title: Code Check
          description: Check that your code compiles and uploads to the board!
          form: upload
        -
          title: Frequency Check
          description: |
            ![piezo](measure-piezo.jpg)

            Place the probes across the speaker end to measure the piezo's frequency.

            The piezo will only beep when the button is pressed.

            Click below to setup the test.

          output: 220 # hz
          onerror: Make sure that the white probe is connected to the same end of the piezo as the Arduino.
          form: dynamic
    -
      title: Neopixel Ring Wiring
      description: |
        ![neopix](neopixel.jpg)

        Wire the Power (red) and Ground (black) ends of the Neopixel ring to the positive and ground rails.

        ![neopix](neopixel-crop1.jpg)

        Connect the "`Data In`" yellow LED pin to the digital 7 on the Arduino.

        ![neopix](neopixel-crop2.jpg)

      tests:
        -
          title: Wiring Check
          description: |
            Press the button below to verify the ring is wired correctly.

            ![neopix](rainbow.gif)

            If the lights are wired up correctly, they will have a glowing pattern.

          jsondata: '{"file":"3_lights.ino"}'
          onerror: Make the sure data pin is connected to pin 7, and the power/ground pins are connected to 5V and GND respectively.
          form: autoupload
    -
      title: Neopixel Ring Code
      description: |
        ![rain](rainbow.gif)

        Include code for the LED ring at the top of the file:

        ```
        #include <Adafruit_NeoPixel.h>
        ```

        Then, define the pin the ring is connected to, and the number of "pixels" in the ring.

        ```
        #define PIN    7
        #define PIXELS 12
        ```

        Before the `setup()` function, initial the ring and a base white color.

        ```
        int color = 0;
        Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXELS, PIN, NEO_GRB + NEO_KHZ800);
        uint32_t white = strip.Color(16, 16, 16); // dim white color
        ```

        Initialize the strip in the `setup()` function.

        ```
            strip.begin(); // This initializes the NeoPixel library.
            strip.setBrightness(16);
        ```

        Before the `loop()` function, insert these two light helper functions.

        ```
        uint32_t Wheel(byte WheelPos) {
            WheelPos = 255 - WheelPos;
            if (WheelPos < 85) {
                return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
            }
            if (WheelPos < 170) {
                WheelPos -= 85;
                return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
            }
            WheelPos -= 170;
            return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
        }

        void rainbow(int start, int wait) {
            int j = start;
            for (int q = 0; q < 3; q++) {
                for (int i = 0; i < strip.numPixels(); i = i + 3) {
                    strip.setPixelColor(i + q, Wheel( (i + j) % 255)); //turn every third pixel on
                }
                strip.show();
                delay(wait);

                for (int i = 0; i < strip.numPixels(); i = i + 5) {
                    strip.setPixelColor(i + q, 0);      //turn every third pixel off
                }
            }
        }
        ```

        Then, in the `loop()` function, change the colors:

        ```
            rainbow(color, 2);
            color = (color+2) % 255;
        ```

      tests:
        -
          title: Hardware Wiring Check
          description: |
            The system will now check to see that you have wired up the LED ring correctly.

            Does the LED ring rotate though the rainbow?

            Click below to setup the test.

          onerror: Check that there are no code compile errors, and that the wire between the button and the board is on the right pin.
          jsondata: '{"file":"3_lights.ino"}'
          form: autoupload
    -
      title: Light Sensor Wiring
      description: |
        ![wiring](light-wiring.jpg)

        Next, install the hardware for sensing the light level.

        Connect the positive `(+)` terminal of the sensor to 5V (red power rail).

        Connect the negative terminal to GND (blue ground rail).

        Connect the the output pin to the Arduino's analog 5 pin `(A5)`.

        ![wiring](light-wiring-crop.jpg)
      tests:
        -
          title: Wiring Check
          description: |
            The system will now check to see that you have wired up the sensor correctly.

            Does the onboard Arduino LED turn on when you shine the flashlight on the sensor?

            Click below to setup the test.

          onerror: Ensure that the + and - terminals are connected to 5V (power/red) and GND (ground/blue) correctly.
          jsondata: '{"file":"4_sense.ino"}'
          form: autoupload
    -
      title: Light Sensor Tuning
      description: |
        ![wiring](flashlight.jpg)

        You can use the flashlight to trigger the light sensor.

        At the top of the file, add a pin definition for the light pin:

        ```
        #define light  A5
        #define outLED 13
        ```

        Before the loop function, add a high and low sensor threshold:

        ```
        #define thresh_lo 100
        #define thresh_hi 900
        ```

        In `setup()`, add the light sensor as an input:

        ```
            pinMode(light, INPUT);
        ```

        In `loop()`, remove the old assignments to outLED, and add these:

        ```
            int level = analogRead(light);
            if (level > thresh_hi) {
                digitalWrite(outLED, HIGH);
            } else if (level < thresh_lo) {
                digitalWrite(outLED, LOW);
            }
        ```

      tests:
        -
          title: Software Trigger Check
          description: |
            The system will now check to see that you programmed the board correctly.

            Click the button below to setup the test.

          onerror: Make sure that you are saving the sensor value into `press`.
          jsondata: '[{"name": "press", "value": 900, "op": "gt"}]' # name, value, line
          form: variable

    -
      title: Code Integration
      description: |
        ![integration](integration.jpg)

        Now that each  hardware component is working, integrate the parts in software.

        The light sensor will trigger the alarm (lights and sound), and pressing button will reset it.
      tests:
        -
          title: Code Check
          description: Check that you can compile and upload the code!
          jsondata: '{"file":"5_complete.ino"}'
          form: autoupload
    -
      title: Task Complete!
      image: /tutorial/complete.gif
      description: Well done!
      tests:
        -
          title: Congrats!
          description: You have successfully completed the tutorial!
          form: info
          info: true








































































-
  tutorial:
    title: Test Sampler
    image: https://i.ytimg.com/vi/ctynv2klT6Q/maxresdefault.jpg
    description: Simple tutorial with all test types.
  steps:
    -
      title: Debugging the debugger.
      image: https://i.ytimg.com/vi/ctynv2klT6Q/maxresdefault.jpg
      description: You can test each of the different test types here.
      tests:
        -
          title: variable monitoring
          description: Does the code take on a value?
          jsondata: '[{"name": "value", "value": 10}]' # name, value, line
          form: variable
        -
          title: manual test
          description: click to verify
          onerror: potentially helpful message!
          form: manual
        -
          title: multiple choice
          description: which of these is good?
          jsondata: '["bad", "bad", "good"]'
          output: 2 # 0-based
          form: multiple
        -
          title: voltage
          description: measure voltage with the two probes.
          form: numeric
          output: '5.0'
        -
          title: question
          description: the correct answer is ok
          form: question
          output: ok
        -
          title: frequency
          description: testing frequency
          output: 2 # in hz
          form: dynamic
        -
          title: compile
          description: Does the code compile?
          form: compile
        -
          title: upload test
          description: Does the code upload?
          form: upload
        -
          title: autoupload test
          description: Does the autouploaded code work?
          jsondata: '{"file":"1_button.ino"}'
          form: autoupload
        -
          title: code selection
          description: highlight code the word 'ok'
          jsondata: '{"match": "ok", "flag": "i"}'
          form: code # regex
        -
          title: information
          description: this is not a step but a simple notice
          form: info
          info: true

