-
  tutorial:
    title: Light Sensitive Alarm Clock
    image: /tutorial/tutorial-demo.gif
    description: When the sun rises, set off an alarm with sound and light.
  steps:
    -
      title: Introduction
      image: /tutorial/tutorial-demo.gif
      description: |
        In this lesson, you will learn how to build an alarm clock which triggers from the sunrise.

        (...or in this case, a flashlight!)
    -
      title: Components Overview
      description: |
        ![parts](parts.jpg)

        Here are the this tutorial requires:

        - Arduino UNO microcontroller
        - Neopixel LED Ring
        - Piezo Buzzer
        - Resistor
        - Button
        - Light Sensor

    -
      title: Firing up the Arduino
      description: |
        ![plug](plug.gif)

        First, connect the Arduino board to the USB port.

        To make sure it is connected ok, try uploading the starter code to it.

        The lights on the top of the board when it recieves new code!
      tests:
        -
          title: Board Power Test
          description: Did the Arduino board light up after plugging it in?
          onerror: Make sure that the board is powered with the USB plug!
          form: manual
        -
          title: Simple Upload Test
          description: Press the button below to try and upload code onto the board.
          onerror: Make sure that the board is plugged with the correctly labeled cable!
          form: upload
    -
      title: Breadboard Connection Overview
      image: /tutorial/breadboard.gif
      description: |
        The red and blue `(+/-)` rows along the sides of the board are connected.

        The center rows are connected horizontally.
    -
      title: Wiring Button Connections
      title: Connecting Power and Ground
      description: |
        ![power](power.jpg)

        From the Arduino to the breadboard, connect:
        - *GND* (ground) line to the blue rail
        - *5V* (power) line to the red rail

        ![power](power-crop.jpg)

      tests:
        -
          title: Breadboard Power Check
          description: |
            ![power](measure-power.jpg)

            Measure the power rail with the tester's two probes on the testing board.

            Press the button below to start measuring voltage.
          onerror: Make sure that you use the 5V pin; not the Vin or 3.3V pins!
          form: numeric
          output: '5.0'
    -
      title: Reset Button Setup
      description: |
        ![button-in](button-in.jpg)

        Connect the button to `GND` by placing a wire between the blue `(-)` line and one end of the button.

        Connect the button's other side to the digital `0` pin on the Arduino board.

        ![button-in](button-in-crop.jpg)

        The button's legs are connected in pairs. When you press the button, you connect the pairs.

        ![button](button.jpg)

      tests:
        -
          title: Button Press Check
          description: |
            ![piezo](measure-button.jpg)

            Measure the voltage across the button.

            ![piezo](measure-button-crop.jpg)

            It should drop when you press down the button and connect the Arduino pin with `0V`!

          form: numeric
          output: '0.0'
        -
          title: Hardware Wiring Check
          description: |
            The system will now check to see that you have wired up the board correctly.

            Does the light change when you push the button?

            Click the button below to setup the test.

          onerror: Check that the wire between the button and the board is in the right place.
          jsondata: '{"file":"1_button.ino"}'
          form: autoupload
    -
      title: Button Press Detection Code
      description: |
        Now that the button is connected, we need to detect when it is being pressed in software.

        At the top of the file, add this definition to set which Arduino pin the button is connected to.

        ```
        #define button 0
        #define outLED 13
        ```

        Next add this code inside of the `setup()` function to add pin 0 as an input, using `pinMode`:

        ```
          pinMode(button, INPUT);
          pinMode(outLED, OUTPUT);
        ```

        Finally, add this code to the `loop()` function to read out the button value and set it to the internal LED.


        ```
          int press = !digitalRead(button);
          digitalWrite(outLED, press);
        ```

      tests:
        -
          title: Software Variable Check
          description: |
            The system will now check to see that you programmed the board correctly.

            Click the button below to setup the test.

          onerror: Make sure that you are saving the sensor value into `press`.
          jsondata: '[{"name": "press", "value": 1}]' # name, value, line
          form: variable
    -
      title: Piezo Buzzer Wiring
      description: |
        ![pie](piezo.jpg)

        Next, connect the piezo buzzer to the the third digital Arduino pin `(3)`.

        Connect the other end of the piezo to GND (the blue rail) with the resistor.

        ![pie](piezo-crop.jpg)

      tests:
        -
          title: Wiring Check
          description: |
            Load the hardware board with preset code to manually verify that it works.

            In this code, if the board is wired up according to the tutorial it will beep.

          onerror: Make the sure one end of the piezo is going to GND with the resistor, and the other end is going to pin 3!
          jsondata: '{"file":"2_sounds.ino"}'
          form: autoupload
    -
      title: Tone Generation Code
      description: |
        Now that our system is reading the button correctly, let's hook the
        button up to play a noise using the Piezo sensor and the Arduino tone generator.

        Use this code, or upload and it test it automatically from the testing pane.

        Add two more statements at the top to define our buzzer pin, and the note frequency.

        ```
        #define buzzer 3
        #define freq 220
        ```

        Then, in the `loop()` function, set the noise to play when the button is pressed:

        ```
          int pressed = !digitalRead(button);
          digitalWrite(outLED, pressed);
          if (pressed) {
            tone(buzzer, freq, 10);
            delay(10);
          }
        ```

      tests:
        -
          title: Code Selection Test
          description: Highlight to select the part of your code which turns on the buzzer.
          onerror: Make sure to include the buzzer line as described in the left pane.
          jsondata: '{"match": "tone", "flag": "i"}'
          form: code # regex
        -
          title: Code Check
          description: Check that your code compiles and uploads to the board!
          form: upload
        -
          title: Frequency Check
          description: |
            ![piezo](measure-piezo.jpg)

            Place the probes across the speaker end to measure the piezo's frequency.

          output: 220 # hz
          form: dynamic
    -
      title: Neopixel Ring Wiring
      description: |
        ![neopix](neopixel.jpg)

        Wire the Power (red) and Ground (black) ends of the neopixel ring to the positive and ground rails.

        Place the `Data In` pin on the Arduino 7 pin.
      tests:
        -
          title: Wiring Check
          description: |
            Press the button below to verify the ring is wired correctly.

            ![neopix](rainbow.gif)

            If the lights are wired up correctly, they will have a glowing pattern.

          jsondata: '{"file":"3_lights.ino"}'
          form: autoupload
    -
      title: Neopixel Ring Code
      description: |
        ![rain](rainbow.gif)

        We want to have a nice pattern which shows when the alarm is triggered.

        Connect the "Data In" pin of the Neopixel LED ring to the Arduino D7 pin.

        Add this library at the top of the file to include.

        ```
        #include <Adafruit_NeoPixel.h>

        #define PIN    7
        #define PIXELS 12

        int color = 0;

        Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXELS, PIN, NEO_GRB + NEO_KHZ800);
        uint32_t white = strip.Color(16, 16, 16); // dim white color

        void setup() {
            strip.begin(); // This initializes the NeoPixel library.
            strip.setBrightness(16);
        }

        uint32_t Wheel(byte WheelPos) {
            WheelPos = 255 - WheelPos;
            if (WheelPos < 85) {
                return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
            }
            if (WheelPos < 170) {
                WheelPos -= 85;
                return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
            }
            WheelPos -= 170;
            return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
        }

        void rainbow(int start, int wait) {
            int j = start;
            for (int q = 0; q < 3; q++) {
                for (int i = 0; i < strip.numPixels(); i = i + 3) {
                    strip.setPixelColor(i + q, Wheel( (i + j) % 255)); //turn every third pixel on
                }
                strip.show();
                delay(wait);

                for (int i = 0; i < strip.numPixels(); i = i + 5) {
                    strip.setPixelColor(i + q, 0);      //turn every third pixel off
                }
            }
        }

        void loop() {
            rainbow(color, 2);
            color = (color+2) % 255;
        }

        ```

      tests:
        -
          title: Wiring Check
          description: Check that you can compile and upload the code!
          jsondata: '{"file":"3_lights.ino"}'
          form: autoupload
    -
      title: Light Sensor Wiring
      description: |
        ![wiring](light-wiring.jpg)

        Connect the positive `(+)` terminal of the sensor to 5V (red power rail).

        Connect the negative terminal to GND (blue ground rail).

        Connect the the output pin to the Arduino's analog 5 pin `(A5)`.

        ![wiring](light-wiring-crop.jpg)
      tests:
        -
          title: Wiring Check
          description: Upload starter code for the light sensor. If it is configured correctly, you
          jsondata: '{"file":"4_sense.ino"}'
          form: autoupload
    -
      title: Light Sensor Tuning
      description: |
        ![wiring](flashlight.jpg)

        You can use the flashlight to trigger the light sensor.

        Threshold ranges guard the alarm from going off when it shouldn't.

        You can use the code to test the board:

        ```
        #include "Arduino.h"

        #define light  A5
        #define outLED 13

        #define thresh_lo 100
        #define thresh_hi 900

        void setup() {
            pinMode(light, INPUT);
            pinMode(outLED, OUTPUT);
        }

        void loop() {
            int level = analogRead(light);
            if (level > thresh_hi) {
                digitalWrite(outLED, HIGH);
            } else if (level < thresh_lo) {
                digitalWrite(outLED, LOW);
            }
        }


        ```

    -
      title: Integration
      description: |
        ![integration](integration.jpg)

        Now that each of the hardware components is working, we will integrate the different parts.
        The light sensor will trigger the alarm (lights and sound), and the button will reset it.
      tests:
        -
          title: Code Check
          description: Check that you can compile and upload the code!
          jsondata: '{"file":"5_complete.ino"}'
          form: autoupload
    -
      title: Task Complete!
      image: /tutorial/complete.gif
      description: Well done!
      tests:
        -
          title: Congrats!
          description: You have successfully completed the tutorial!
          form: info
          info: true








































































-
  tutorial:
    title: Test Sampler
    image: https://i.ytimg.com/vi/ctynv2klT6Q/maxresdefault.jpg
    description: Simple tutorial with all test types.
  steps:
    -
      title: Debugging the debugger.
      image: https://i.ytimg.com/vi/ctynv2klT6Q/maxresdefault.jpg
      description: You can test each of the different test types here.
      tests:
        -
          title: variable monitoring
          description: Does the code take on a value?
          jsondata: '[{"name": "value", "value": 10}]' # name, value, line
          form: variable
        -
          title: manual test
          description: click to verify
          onerror: potentially helpful message!
          form: manual
        -
          title: multiple choice
          description: which of these is good?
          jsondata: '["bad", "bad", "good"]'
          output: 2 # 0-based
          form: multiple
        -
          title: voltage
          description: measure voltage with the two probes.
          form: numeric
          output: '5.0'
        -
          title: question
          description: the correct answer is ok
          form: question
          output: ok
        -
          title: frequency
          description: testing frequency
          output: 2 # in hz
          form: dynamic
        -
          title: compile
          description: Does the code compile?
          form: compile
        -
          title: upload test
          description: Does the code upload?
          form: upload
        -
          title: autoupload test
          description: Does the autouploaded code work?
          jsondata: '{"file":"1_button.ino"}'
          form: autoupload
        -
          title: code selection
          description: highlight code the word 'ok'
          jsondata: '{"match": "ok", "flag": "i"}'
          form: code # regex
        -
          title: information
          description: this is not a step but a simple notice
          form: info
          info: true

